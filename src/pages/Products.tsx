
import { useState, useEffect } from 'react';
import MainLayout from '@/components/layout/MainLayout';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Dialog, DialogTrigger, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter } from '@/components/ui/dialog';
import { Form, FormField, FormItem, FormLabel, FormControl, FormDescription } from '@/components/ui/form';
import { Plus, Edit, Trash2, Package } from 'lucide-react';
import { useForm } from 'react-hook-form';
import { useToast } from '@/hooks/use-toast';
import { Product } from '@/lib/types';

// Mock data
const mockProducts: Product[] = [
  { id: '1', name: 'Milk (1L)', unit: 'bottle' },
  { id: '2', name: 'Yogurt (500g)', unit: 'cup' },
  { id: '3', name: 'Cheese (250g)', unit: 'pack' },
  { id: '4', name: 'Butter (100g)', unit: 'pack' },
  { id: '5', name: 'Cream (200ml)', unit: 'bottle' },
];

interface FormValues {
  name: string;
  unit: string;
}

export default function Products() {
  const [products, setProducts] = useState<Product[]>([]);
  const [loading, setLoading] = useState(true);
  const [openDialog, setOpenDialog] = useState(false);
  const [editingProduct, setEditingProduct] = useState<Product | null>(null);
  const [searchTerm, setSearchTerm] = useState('');
  const { toast } = useToast();
  
  const form = useForm<FormValues>({
    defaultValues: {
      name: '',
      unit: '',
    },
  });
  
  useEffect(() => {
    // Simulate API call
    setTimeout(() => {
      setProducts(mockProducts);
      setLoading(false);
    }, 1000);
  }, []);
  
  useEffect(() => {
    if (editingProduct) {
      form.setValue('name', editingProduct.name);
      form.setValue('unit', editingProduct.unit);
    } else {
      form.reset();
    }
  }, [editingProduct, form]);
  
  const onSubmit = (data: FormValues) => {
    if (editingProduct) {
      // Update existing product
      setProducts(prev => 
        prev.map(product => 
          product.id === editingProduct.id ? { 
            ...product, 
            name: data.name,
            unit: data.unit 
          } : product
        )
      );
      
      toast({
        title: "Product updated",
        description: `Product '${data.name}' has been updated successfully.`,
      });
    } else {
      // Create new product
      const newProduct: Product = {
        id: `${products.length + 1}`, // In a real app, this would be generated by the backend
        name: data.name,
        unit: data.unit,
      };
      
      setProducts(prev => [...prev, newProduct]);
      
      toast({
        title: "Product created",
        description: `Product '${data.name}' has been created successfully.`,
      });
    }
    
    setOpenDialog(false);
    setEditingProduct(null);
    form.reset();
  };
  
  const handleDelete = (id: string) => {
    setProducts(prev => prev.filter(product => product.id !== id));
    
    toast({
      title: "Product deleted",
      description: "The product has been deleted successfully.",
      variant: "destructive",
    });
  };
  
  // Filter products based on search term
  const filteredProducts = products.filter(product => 
    product.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
    product.unit.toLowerCase().includes(searchTerm.toLowerCase())
  );
  
  return (
    <MainLayout requiredRoles={['admin']}>
      <div className="space-y-6">
        <div className="flex justify-between items-center">
          <div>
            <h1 className="text-2xl font-bold mb-1">Products Management</h1>
            <p className="text-gray-500">Manage dairy products and units</p>
          </div>
          <Dialog open={openDialog} onOpenChange={setOpenDialog}>
            <DialogTrigger asChild>
              <Button className="bg-blue-700 hover:bg-blue-800">
                <Plus className="h-4 w-4 mr-2" />
                Add Product
              </Button>
            </DialogTrigger>
            <DialogContent className="sm:max-w-[475px]">
              <DialogHeader>
                <DialogTitle>{editingProduct ? 'Edit Product' : 'Add New Product'}</DialogTitle>
                <DialogDescription>
                  {editingProduct 
                    ? 'Update the product details below.' 
                    : 'Create a new product for the dairy factory.'}
                </DialogDescription>
              </DialogHeader>
              <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
                <FormField
                  control={form.control}
                  name="name"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Product Name</FormLabel>
                      <FormControl>
                        <Input placeholder="Enter product name (e.g., Milk (1L))" {...field} />
                      </FormControl>
                      <FormDescription>
                        Include quantity in the name for clarity
                      </FormDescription>
                    </FormItem>
                  )}
                />
                
                <FormField
                  control={form.control}
                  name="unit"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Unit</FormLabel>
                      <FormControl>
                        <Input placeholder="Enter unit (e.g., bottle, pack)" {...field} />
                      </FormControl>
                      <FormDescription>
                        The unit used for this product (e.g., bottle, pack, box)
                      </FormDescription>
                    </FormItem>
                  )}
                />
                
                <DialogFooter>
                  <Button 
                    type="button" 
                    variant="outline" 
                    onClick={() => {
                      setOpenDialog(false);
                      setEditingProduct(null);
                      form.reset();
                    }}
                  >
                    Cancel
                  </Button>
                  <Button 
                    type="submit" 
                    className="bg-blue-700 hover:bg-blue-800"
                  >
                    {editingProduct ? 'Update Product' : 'Add Product'}
                  </Button>
                </DialogFooter>
              </form>
            </DialogContent>
          </Dialog>
        </div>
        
        <Card>
          <CardHeader>
            <CardTitle>All Products</CardTitle>
          </CardHeader>
          <CardContent>
            {loading ? (
              <div className="text-center py-6">Loading products...</div>
            ) : (
              <>
                <div className="flex items-center mb-4">
                  <Input
                    placeholder="Search products..."
                    className="max-w-sm"
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                  />
                </div>
                
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead>ID</TableHead>
                      <TableHead>Product Name</TableHead>
                      <TableHead>Unit</TableHead>
                      <TableHead className="text-right">Actions</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {filteredProducts.length === 0 ? (
                      <TableRow>
                        <TableCell colSpan={4} className="text-center py-6">
                          No products found. Create your first product to get started.
                        </TableCell>
                      </TableRow>
                    ) : (
                      filteredProducts.map((product) => (
                        <TableRow key={product.id}>
                          <TableCell className="font-medium">{product.id}</TableCell>
                          <TableCell>
                            <div className="flex items-center">
                              <Package className="h-4 w-4 mr-2 text-blue-600" />
                              {product.name}
                            </div>
                          </TableCell>
                          <TableCell>{product.unit}</TableCell>
                          <TableCell className="text-right">
                            <div className="flex justify-end space-x-2">
                              <Button
                                variant="outline"
                                size="sm"
                                onClick={() => {
                                  setEditingProduct(product);
                                  setOpenDialog(true);
                                }}
                              >
                                <Edit className="h-4 w-4" />
                              </Button>
                              <Button
                                variant="outline"
                                size="sm"
                                className="text-red-500 hover:text-red-600"
                                onClick={() => handleDelete(product.id)}
                              >
                                <Trash2 className="h-4 w-4" />
                              </Button>
                            </div>
                          </TableCell>
                        </TableRow>
                      ))
                    )}
                  </TableBody>
                </Table>
              </>
            )}
          </CardContent>
        </Card>
      </div>
    </MainLayout>
  );
}
