
import { useState, useEffect } from 'react';
import MainLayout from '@/components/layout/MainLayout';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Dialog, DialogTrigger, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter } from '@/components/ui/dialog';
import { Form, FormField, FormItem, FormLabel, FormControl, FormDescription } from '@/components/ui/form';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Checkbox } from '@/components/ui/checkbox';
import { Switch } from '@/components/ui/switch';
import { Label } from '@/components/ui/label';
import { Plus, Edit, Trash2, User, List } from 'lucide-react';
import { useForm } from 'react-hook-form';
import { useToast } from '@/hooks/use-toast';
import { Seller, Route } from '@/lib/types';

// Mock data
const mockSellers: Seller[] = [
  { id: '1', name: 'Metro Grocery', route_id: '1', is_public: true, balance: 0 },
  { id: '2', name: 'City Mart', route_id: '2', is_public: false, balance: 450 },
  { id: '3', name: 'Daily Fresh', route_id: '3', is_public: true, balance: 230 },
  { id: '4', name: 'Green Valley', route_id: '1', is_public: false, balance: 0 },
  { id: '5', name: 'Corner Shop', route_id: '4', is_public: true, balance: 125 },
];

const mockRoutes: Route[] = [
  { id: 1, name: 'North Area', code: 'NRTH' },
  { id: 2, name: 'South Area', code: 'SUTH' },
  { id: 3, name: 'East Area', code: 'EAST' },
  { id: 4, name: 'West Area', code: 'WEST' },
  { id: 5, name: 'Central Area', code: 'CENT' },
];

interface FormValues {
  name: string;
  route_id: string;
  is_public: boolean;
}

export default function Sellers() {
  const [sellers, setSellers] = useState<Seller[]>([]);
  const [routes, setRoutes] = useState<Route[]>([]);
  const [loading, setLoading] = useState(true);
  const [openDialog, setOpenDialog] = useState(false);
  const [editingSeller, setEditingSeller] = useState<Seller | null>(null);
  const [searchTerm, setSearchTerm] = useState('');
  const { toast } = useToast();
  
  const form = useForm<FormValues>({
    defaultValues: {
      name: '',
      route_id: '',
      is_public: false,
    },
  });
  
  useEffect(() => {
    // Simulate API call
    setTimeout(() => {
      setSellers(mockSellers);
      setRoutes(mockRoutes);
      setLoading(false);
    }, 1000);
  }, []);
  
  useEffect(() => {
    if (editingSeller) {
      form.setValue('name', editingSeller.name);
      form.setValue('route_id', editingSeller.route_id);
      form.setValue('is_public', editingSeller.is_public);
    } else {
      form.reset();
    }
  }, [editingSeller, form]);
  
  const onSubmit = (data: FormValues) => {
    if (editingSeller) {
      // Update existing seller
      setSellers(prev => 
        prev.map(seller => 
          seller.id === editingSeller.id ? { 
            ...seller, 
            name: data.name,
            route_id: data.route_id,
            is_public: data.is_public
          } : seller
        )
      );
      
      toast({
        title: "Seller updated",
        description: `Seller '${data.name}' has been updated successfully.`,
      });
    } else {
      // Create new seller
      const newSeller: Seller = {
        id: `${sellers.length + 1}`, // In a real app, this would be generated by the backend
        name: data.name,
        route_id: data.route_id,
        is_public: data.is_public,
        balance: 0,
      };
      
      setSellers(prev => [...prev, newSeller]);
      
      toast({
        title: "Seller created",
        description: `Seller '${data.name}' has been created successfully.`,
      });
    }
    
    setOpenDialog(false);
    setEditingSeller(null);
    form.reset();
  };
  
  const handleDelete = (id: string) => {
    setSellers(prev => prev.filter(seller => seller.id !== id));
    
    toast({
      title: "Seller deleted",
      description: "The seller has been deleted successfully.",
      variant: "destructive",
    });
  };
  
  // Filter sellers based on search term
  const filteredSellers = sellers.filter(seller => 
    seller.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
    getRouteName(seller.route_id).toLowerCase().includes(searchTerm.toLowerCase())
  );
  
  // Get route name by id
  const getRouteName = (routeId: string) => {
    const route = routes.find(r => r.id.toString() === routeId);
    return route ? route.name : 'Unknown Route';
  };
  
  return (
    <MainLayout requiredRoles={['admin']}>
      <div className="space-y-6">
        <div className="flex justify-between items-center">
          <div>
            <h1 className="text-2xl font-bold mb-1">Sellers Management</h1>
            <p className="text-gray-500">Manage vendors and their route assignments</p>
          </div>
          <Dialog open={openDialog} onOpenChange={setOpenDialog}>
            <DialogTrigger asChild>
              <Button className="bg-blue-700 hover:bg-blue-800">
                <Plus className="h-4 w-4 mr-2" />
                Add Seller
              </Button>
            </DialogTrigger>
            <DialogContent className="sm:max-w-[475px]">
              <DialogHeader>
                <DialogTitle>{editingSeller ? 'Edit Seller' : 'Add New Seller'}</DialogTitle>
                <DialogDescription>
                  {editingSeller 
                    ? 'Update the seller details below.' 
                    : 'Create a new seller and assign to a route.'}
                </DialogDescription>
              </DialogHeader>
              <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
                <FormField
                  control={form.control}
                  name="name"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Seller Name</FormLabel>
                      <FormControl>
                        <Input placeholder="Enter seller name" {...field} />
                      </FormControl>
                    </FormItem>
                  )}
                />
                
                <FormField
                  control={form.control}
                  name="route_id"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Route</FormLabel>
                      <Select 
                        onValueChange={field.onChange} 
                        defaultValue={field.value}
                        value={field.value}
                      >
                        <FormControl>
                          <SelectTrigger>
                            <SelectValue placeholder="Select a route" />
                          </SelectTrigger>
                        </FormControl>
                        <SelectContent>
                          {routes.map((route) => (
                            <SelectItem key={route.id} value={route.id.toString()}>
                              {route.name}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                      <FormDescription>
                        Assign the seller to a delivery route
                      </FormDescription>
                    </FormItem>
                  )}
                />
                
                <FormField
                  control={form.control}
                  name="is_public"
                  render={({ field }) => (
                    <FormItem className="flex flex-row items-center justify-between rounded-lg border p-4">
                      <div className="space-y-0.5">
                        <FormLabel className="text-base">Public Seller</FormLabel>
                        <FormDescription>
                          Mark as public for general retail sales
                        </FormDescription>
                      </div>
                      <FormControl>
                        <Switch
                          checked={field.value}
                          onCheckedChange={field.onChange}
                        />
                      </FormControl>
                    </FormItem>
                  )}
                />
                
                <DialogFooter>
                  <Button 
                    type="button" 
                    variant="outline" 
                    onClick={() => {
                      setOpenDialog(false);
                      setEditingSeller(null);
                      form.reset();
                    }}
                  >
                    Cancel
                  </Button>
                  <Button 
                    type="submit" 
                    className="bg-blue-700 hover:bg-blue-800"
                  >
                    {editingSeller ? 'Update Seller' : 'Add Seller'}
                  </Button>
                </DialogFooter>
              </form>
            </DialogContent>
          </Dialog>
        </div>
        
        <Card>
          <CardHeader>
            <CardTitle>All Sellers</CardTitle>
          </CardHeader>
          <CardContent>
            {loading ? (
              <div className="text-center py-6">Loading sellers...</div>
            ) : (
              <>
                <div className="flex items-center mb-4">
                  <Input
                    placeholder="Search sellers or routes..."
                    className="max-w-sm"
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                  />
                </div>
                
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead>ID</TableHead>
                      <TableHead>Seller Name</TableHead>
                      <TableHead>Route</TableHead>
                      <TableHead>Public</TableHead>
                      <TableHead>Balance</TableHead>
                      <TableHead className="text-right">Actions</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {filteredSellers.length === 0 ? (
                      <TableRow>
                        <TableCell colSpan={6} className="text-center py-6">
                          No sellers found. Create your first seller to get started.
                        </TableCell>
                      </TableRow>
                    ) : (
                      filteredSellers.map((seller) => (
                        <TableRow key={seller.id}>
                          <TableCell className="font-medium">{seller.id}</TableCell>
                          <TableCell>
                            <div className="flex items-center">
                              <User className="h-4 w-4 mr-2 text-gray-500" />
                              {seller.name}
                            </div>
                          </TableCell>
                          <TableCell>
                            <div className="flex items-center">
                              <List className="h-4 w-4 mr-2 text-gray-500" />
                              {getRouteName(seller.route_id)}
                            </div>
                          </TableCell>
                          <TableCell>
                            <div className="flex items-center">
                              <Checkbox checked={seller.is_public} disabled />
                            </div>
                          </TableCell>
                          <TableCell>
                            ${seller.balance?.toLocaleString() || '0'}
                          </TableCell>
                          <TableCell className="text-right">
                            <div className="flex justify-end space-x-2">
                              <Button
                                variant="outline"
                                size="sm"
                                onClick={() => {
                                  setEditingSeller(seller);
                                  setOpenDialog(true);
                                }}
                              >
                                <Edit className="h-4 w-4" />
                              </Button>
                              <Button
                                variant="outline"
                                size="sm"
                                className="text-red-500 hover:text-red-600"
                                onClick={() => handleDelete(seller.id)}
                              >
                                <Trash2 className="h-4 w-4" />
                              </Button>
                            </div>
                          </TableCell>
                        </TableRow>
                      ))
                    )}
                  </TableBody>
                </Table>
              </>
            )}
          </CardContent>
        </Card>
      </div>
    </MainLayout>
  );
}
